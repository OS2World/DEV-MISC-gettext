diff --git a/autogen.cmd b/autogen.cmd
new file mode 100755
index 0000000..9efd7e6
--- /dev/null
+++ b/autogen.cmd
@@ -0,0 +1,6 @@
+extproc sh
+
+libtoolize -f
+
+COMSPEC=/bin/sh \
+    ./autogen.sh --quick --skip-gnulib
diff --git a/configure.cmd b/configure.cmd
new file mode 100755
index 0000000..f95175f
--- /dev/null
+++ b/configure.cmd
@@ -0,0 +1,7 @@
+extproc sh
+
+./configure --prefix=/usr \
+            --enable-shared \
+            --enable-static \
+            --disable-relocatable \
+            --with-included-gettext
diff --git a/gettext-runtime/configure.ac b/gettext-runtime/configure.ac
index dcfd27a..0e97452 100644
--- a/gettext-runtime/configure.ac
+++ b/gettext-runtime/configure.ac
@@ -101,7 +101,7 @@ AH_BOTTOM([
 #endif
 
 /* Extra OS/2 (emx+gcc) defines.  */
-#ifdef __EMX__
+#if defined __EMX__ && !defined __KLIBC__
 # include "intl/os2compat.h"
 #endif
 ])
diff --git a/gettext-runtime/gnulib-lib/localcharset.c b/gettext-runtime/gnulib-lib/localcharset.c
index a225a2e..ac1a71b 100644
--- a/gettext-runtime/gnulib-lib/localcharset.c
+++ b/gettext-runtime/gnulib-lib/localcharset.c
@@ -478,6 +478,7 @@ locale_charset (void)
   ULONG cp[3];
   ULONG cplen;
 
+  codeset = NULL;
   /* Allow user to override the codeset, as set in the operating system,
      with standard language environment variables.  */
   locale = getenv ("LC_ALL");
@@ -507,12 +508,13 @@ locale_charset (void)
               buf [modifier - dot] = '\0';
               return buf;
             }
-        }
 
-      /* Resolve through the charset.alias file.  */
-      codeset = locale;
+          /* Resolve through the charset.alias file.  */
+          codeset = locale;
+        }
     }
-  else
+
+  if (codeset == NULL)
     {
       /* OS/2 has a function returning the locale's codepage as a number.  */
       if (DosQueryCp (sizeof (cp), cp, &cplen))
diff --git a/gettext-runtime/gnulib-lib/progreloc.c b/gettext-runtime/gnulib-lib/progreloc.c
index 45d6cf1..c7b2b90 100644
--- a/gettext-runtime/gnulib-lib/progreloc.c
+++ b/gettext-runtime/gnulib-lib/progreloc.c
@@ -44,6 +44,12 @@
 # include <windows.h>
 #endif
 
+#ifdef __EMX__
+# define INCL_DOS
+# include <os2.h>
+#endif
+
+
 #include "relocatable.h"
 
 #ifdef NO_XMALLOC
@@ -162,6 +168,18 @@ find_executable (const char *argv0)
     /* Shouldn't happen.  */
     return NULL;
   return xstrdup (location);
+#elif defined __EMX__
+  PPIB ppib;
+  char location[CCHMAXPATH];
+
+  DosGetInfoBlocks (NULL, &ppib);
+
+  if (DosQueryModuleName (ppib->pib_hmte, sizeof (location), location))
+    return NULL;
+
+  _fnslashify (location);
+
+  return xstrdup (location);
 #else /* Unix */
 # ifdef __linux__
   /* The executable is accessible as /proc/<pid>/exe.  In newer Linux
diff --git a/gettext-runtime/gnulib-lib/relocatable.c b/gettext-runtime/gnulib-lib/relocatable.c
index 410228a..a5c64db 100644
--- a/gettext-runtime/gnulib-lib/relocatable.c
+++ b/gettext-runtime/gnulib-lib/relocatable.c
@@ -47,6 +47,14 @@
 # include <windows.h>
 #endif
 
+#ifdef __EMX__
+# define INCL_DOS
+# include <os2.h>
+
+#define strcmp  stricmp
+#define strncmp strnicmp
+#endif
+
 #if DEPENDS_ON_LIBCHARSET
 # include <libcharset.h>
 #endif
@@ -335,6 +343,43 @@ DllMain (HINSTANCE module_handle, DWORD event, LPVOID reserved)
   return TRUE;
 }
 
+#elif defined __EMX__
+
+extern int  _CRT_init (void);
+extern void _CRT_term (void);
+extern void __ctordtorInit (void);
+extern void __ctordtorTerm (void);
+
+unsigned long _System
+_DLL_InitTerm (unsigned long hModule, unsigned long ulFlag)
+{
+  static char location[CCHMAXPATH];
+
+  switch (ulFlag)
+    {
+      case 0:
+        if (_CRT_init () == -1)
+          return 0;
+
+        __ctordtorInit();
+
+        if (DosQueryModuleName (hModule, sizeof (location), location))
+          return 0;
+
+        _fnslashify (location);
+        shared_library_fullname = strdup (location);
+        break;
+
+      case 1:
+        __ctordtorTerm();
+
+        _CRT_term ();
+        break;
+    }
+
+  return 1;
+}
+
 #else /* Unix */
 
 static void
@@ -390,15 +435,15 @@ find_shared_library_fullname ()
 #endif
 }
 
-#endif /* Native Windows / Unix */
+#endif /* Native Windows / EMX / Unix */
 
 /* Return the full pathname of the current shared library.
    Return NULL if unknown.
-   Guaranteed to work only on Linux, Cygwin, and native Windows.  */
+   Guaranteed to work only on Linux, EMX, Cygwin, and native Windows.  */
 static char *
 get_shared_library_fullname ()
 {
-#if !((defined _WIN32 || defined __WIN32__) && !defined __CYGWIN__)
+#if !((defined _WIN32 || defined __WIN32__) && !defined __CYGWIN__ || defined __EMX__)
   static bool tried_find_shared_library_fullname;
   if (!tried_find_shared_library_fullname)
     {
@@ -489,8 +534,30 @@ relocate (const char *pathname)
             }
         }
     }
+
+#ifdef __EMX__
+  if (pathname && ISSLASH (pathname[0]))
+    {
+      const char *unixroot = getenv ("UNIXROOT");
+
+      if (unixroot && HAS_DEVICE (unixroot) && !unixroot[2])
+        {
+          char *result = (char *) xmalloc (2 + strlen (pathname) + 1);
+#ifdef NO_XMALLOC
+          if (result != NULL)
+#endif
+            {
+              strcpy (result, unixroot);
+              strcpy (result + 2, pathname);
+              return result;
+            }
+        }
+    }
+#endif
+
   /* Nothing to relocate.  */
   return pathname;
 }
 
 #endif
+
diff --git a/gettext-runtime/gnulib-lib/stdint.in.h b/gettext-runtime/gnulib-lib/stdint.in.h
index 2db8b2e..e9af25b 100644
--- a/gettext-runtime/gnulib-lib/stdint.in.h
+++ b/gettext-runtime/gnulib-lib/stdint.in.h
@@ -291,8 +291,15 @@ typedef gl_uint_fast32_t gl_uint_fast16_t;
 
 #undef intptr_t
 #undef uintptr_t
+#ifndef __KLIBC__
 typedef long int gl_intptr_t;
 typedef unsigned long int gl_uintptr_t;
+#else
+/* intptr_t and uintptr_t are defined as int and unsigned int on OS/2 kLIBC,
+   respectively */
+typedef int gl_intptr_t;
+typedef unsigned int gl_uintptr_t;
+#endif
 #define intptr_t gl_intptr_t
 #define uintptr_t gl_uintptr_t
 
diff --git a/gettext-runtime/gnulib-lib/wcwidth.c b/gettext-runtime/gnulib-lib/wcwidth.c
index 253fcaa..c4f7ba7 100644
--- a/gettext-runtime/gnulib-lib/wcwidth.c
+++ b/gettext-runtime/gnulib-lib/wcwidth.c
@@ -26,6 +26,15 @@
 #include "streq.h"
 #include "uniwidth.h"
 
+#ifdef __KLIBC__
+/* To avoid 'conflicting types' error for `__wcwidth' on OS/2 kLIBC.
+   wchar_t(unsigned short) is defined differently from wint_t(int) on
+   OS/2 kLIBC. */
+#undef wcwidth
+/* Ignore wcwidth() of OS/2 kLIBC */
+#undef HAVE_WCWIDTH
+#endif
+
 int
 wcwidth (wchar_t wc)
 #undef wcwidth
diff --git a/gettext-runtime/intl/Makefile.in b/gettext-runtime/intl/Makefile.in
index 7151d39..edc127e 100644
--- a/gettext-runtime/intl/Makefile.in
+++ b/gettext-runtime/intl/Makefile.in
@@ -226,7 +226,8 @@ libintl.la libgnuintl.la: $(OBJECTS) $(OBJECTS_RES_@WOE32@)
 	  $(OBJECTS_RES_@WOE32@) \
 	  -version-info $(LTV_CURRENT):$(LTV_REVISION):$(LTV_AGE) \
 	  -rpath $(libdir) \
-	  -no-undefined
+	  -no-undefined \
+	  -os2dllname $(subst lib, k, $(basename $@))
 
 # Libtool's library version information for libintl.
 # Before making a gettext release, the gettext maintainer must change this
diff --git a/gettext-runtime/intl/bindtextdom.c b/gettext-runtime/intl/bindtextdom.c
index 2e7ada4..c315421 100644
--- a/gettext-runtime/intl/bindtextdom.c
+++ b/gettext-runtime/intl/bindtextdom.c
@@ -318,6 +318,27 @@ set_binding_values (const char *domainname,
 char *
 BINDTEXTDOMAIN (const char *domainname, const char *dirname)
 {
+#ifdef __EMX__
+  char dirname_with_drive[_MAX_PATH];
+
+  if (dirname && (dirname[0] == '/' || dirname[0] == '\\' ))
+    {
+      const char *unixroot = getenv ("UNIXROOT");
+      size_t len = strlen (dirname) + 1;
+
+      if (unixroot
+          && unixroot[0] != '\0'
+          && unixroot[1] == ':'
+          && unixroot[2] == '\0'
+          && 2 + len <= _MAX_PATH)
+        {
+          memcpy (dirname_with_drive, unixroot, 2);
+          memcpy (dirname_with_drive + 2, dirname, len);
+
+          dirname = dirname_with_drive;
+        }
+    }
+#endif
   set_binding_values (domainname, &dirname, NULL);
   return (char *) dirname;
 }
diff --git a/gettext-runtime/intl/dcigettext.c b/gettext-runtime/intl/dcigettext.c
index be2dceb..ac310af 100644
--- a/gettext-runtime/intl/dcigettext.c
+++ b/gettext-runtime/intl/dcigettext.c
@@ -323,7 +323,7 @@ const char *_nl_current_default_domain attribute_hidden
 #endif
 
 /* Contains the default location of the message catalogs.  */
-#if defined __EMX__
+#if defined __EMX__ && !defined __KLIBC__
 extern const char _nl_default_dirname[];
 #else
 # ifdef _LIBC
diff --git a/gettext-runtime/intl/gettextP.h b/gettext-runtime/intl/gettextP.h
index 3373ccc..a425991 100644
--- a/gettext-runtime/intl/gettextP.h
+++ b/gettext-runtime/intl/gettextP.h
@@ -218,6 +218,9 @@ struct binding
 /* A counter which is incremented each time some previous translations
    become invalid.
    This variable is part of the external ABI of the GNU libintl.  */
+#if defined __KLIBC__ && !defined _LIBC
+# define _nl_msg_cat_cntr libintl_nl_msg_cat_cntr
+#endif
 #ifdef IN_LIBGLOCALE
 # include <glocale/config.h>
 extern LIBGLOCALE_DLL_EXPORTED int _nl_msg_cat_cntr;
diff --git a/gettext-runtime/intl/localcharset.c b/gettext-runtime/intl/localcharset.c
index 670b8e6..cb3e1d3 100644
--- a/gettext-runtime/intl/localcharset.c
+++ b/gettext-runtime/intl/localcharset.c
@@ -478,6 +478,7 @@ locale_charset (void)
   ULONG cp[3];
   ULONG cplen;
 
+  codeset = NULL;
   /* Allow user to override the codeset, as set in the operating system,
      with standard language environment variables.  */
   locale = getenv ("LC_ALL");
@@ -507,12 +508,13 @@ locale_charset (void)
               buf [modifier - dot] = '\0';
               return buf;
             }
-        }
 
-      /* Resolve through the charset.alias file.  */
-      codeset = locale;
+          /* Resolve through the charset.alias file.  */
+          codeset = locale;
+        }
     }
-  else
+
+  if (codeset == NULL)
     {
       /* OS/2 has a function returning the locale's codepage as a number.  */
       if (DosQueryCp (sizeof (cp), cp, &cplen))
diff --git a/gettext-runtime/intl/osdep.c b/gettext-runtime/intl/osdep.c
index 7143d82..8da226d 100644
--- a/gettext-runtime/intl/osdep.c
+++ b/gettext-runtime/intl/osdep.c
@@ -16,7 +16,7 @@
 
 #if defined __CYGWIN__ || defined __MINGW32__
 # include "intl-exports.c"
-#elif defined __EMX__
+#elif defined __EMX__ && !defined __KLIBC__
 # include "os2compat.c"
 #else
 /* Avoid AIX compiler warning.  */
diff --git a/gettext-runtime/intl/relocatable.c b/gettext-runtime/intl/relocatable.c
index 7536f6c..14625b7 100644
--- a/gettext-runtime/intl/relocatable.c
+++ b/gettext-runtime/intl/relocatable.c
@@ -47,6 +47,14 @@
 # include <windows.h>
 #endif
 
+#ifdef __EMX__
+# define INCL_DOS
+# include <os2.h>
+
+#define strcmp  stricmp
+#define strncmp strnicmp
+#endif
+
 #if DEPENDS_ON_LIBCHARSET
 # include <libcharset.h>
 #endif
@@ -335,6 +343,43 @@ DllMain (HINSTANCE module_handle, DWORD event, LPVOID reserved)
   return TRUE;
 }
 
+#elif defined __EMX__
+
+extern int  _CRT_init (void);
+extern void _CRT_term (void);
+extern void __ctordtorInit (void);
+extern void __ctordtorTerm (void);
+
+unsigned long _System
+_DLL_InitTerm (unsigned long hModule, unsigned long ulFlag)
+{
+  static char location[CCHMAXPATH];
+
+  switch (ulFlag)
+  {
+    case 0:
+      if (_CRT_init () == -1)
+        return 0;
+
+      __ctordtorInit();
+
+      if (DosQueryModuleName (hModule, sizeof (location), location))
+        return 0;
+
+      _fnslashify (location);
+      shared_library_fullname = strdup (location);
+      break;
+
+    case 1:
+      __ctordtorTerm();
+
+      _CRT_term ();
+      break;
+  }
+
+  return 1;
+}
+
 #else /* Unix */
 
 static void
@@ -390,15 +435,15 @@ find_shared_library_fullname ()
 #endif
 }
 
-#endif /* Native Windows / Unix */
+#endif /* Native Windows / EMX / Unix */
 
 /* Return the full pathname of the current shared library.
    Return NULL if unknown.
-   Guaranteed to work only on Linux, Cygwin, and native Windows.  */
+   Guaranteed to work only on Linux, EMX, Cygwin, and native Windows.  */
 static char *
 get_shared_library_fullname ()
 {
-#if !((defined _WIN32 || defined __WIN32__) && !defined __CYGWIN__)
+#if !((defined _WIN32 || defined __WIN32__) && !defined __CYGWIN__ || defined __EMX__ )
   static bool tried_find_shared_library_fullname;
   if (!tried_find_shared_library_fullname)
     {
@@ -489,6 +534,27 @@ relocate (const char *pathname)
             }
         }
     }
+
+#ifdef __EMX__
+  if (pathname && ISSLASH (pathname[0]))
+    {
+      const char *unixroot = getenv ("UNIXROOT");
+
+      if (unixroot && HAS_DEVICE (unixroot) && !unixroot[2])
+        {
+          char *result = (char *) xmalloc (2 + strlen (pathname) + 1);
+#ifdef NO_XMALLOC
+          if (result != NULL)
+#endif
+            {
+              strcpy (result, unixroot);
+              strcpy (result + 2, pathname);
+              return result;
+            }
+        }
+    }
+#endif
+
   /* Nothing to relocate.  */
   return pathname;
 }
diff --git a/gettext-runtime/tests/test-lock.c b/gettext-runtime/tests/test-lock.c
index d27cac4..e523df3 100644
--- a/gettext-runtime/tests/test-lock.c
+++ b/gettext-runtime/tests/test-lock.c
@@ -81,7 +81,11 @@
 
 #if TEST_POSIX_THREADS
 # include <pthread.h>
-# include <sched.h>
+# ifndef __OS2__
+#  include <sched.h>
+# else
+#  define sched_yield() pthread_yield()
+# endif
 typedef pthread_t gl_thread_t;
 static inline gl_thread_t gl_thread_create (void * (*func) (void *), void *arg)
 {
diff --git a/gettext-tools/configure.ac b/gettext-tools/configure.ac
index 70cf411..f28508f 100644
--- a/gettext-tools/configure.ac
+++ b/gettext-tools/configure.ac
@@ -286,7 +286,7 @@ AH_BOTTOM([
 #endif
 
 /* Extra OS/2 (emx+gcc) defines.  */
-#ifdef __EMX__
+#if defined __EMX__ && !defined __KLIBC__
 # include "intl/os2compat.h"
 #endif
 ])
diff --git a/gettext-tools/examples/hello-c++-kde/admin/configure.in.min b/gettext-tools/examples/hello-c++-kde/admin/configure.in.min
index 7c7e25a..0f025bd 100644
--- a/gettext-tools/examples/hello-c++-kde/admin/configure.in.min
+++ b/gettext-tools/examples/hello-c++-kde/admin/configure.in.min
@@ -41,7 +41,7 @@ AM_INIT_AUTOMAKE(@MODULENAME@, @VERSION@) dnl searches for some needed programs
 KDE_SET_PREFIX
 
 dnl generate the config header
-AM_CONFIG_HEADER(config.h) dnl at the distribution this done
+AC_CONFIG_HEADER(config.h) dnl at the distribution this done
 
 dnl Checks for programs.
 AC_CHECK_COMPILERS
diff --git a/gettext-tools/examples/hello-c++-kde/admin/cvs.sh b/gettext-tools/examples/hello-c++-kde/admin/cvs.sh
index a39fddd..52eabb7 100644
--- a/gettext-tools/examples/hello-c++-kde/admin/cvs.sh
+++ b/gettext-tools/examples/hello-c++-kde/admin/cvs.sh
@@ -113,7 +113,7 @@ $ACLOCAL || exit 1
 echo "*** Creating configure"
 call_and_fix_autoconf
 
-if egrep "^AM_CONFIG_HEADER" configure.in >/dev/null 2>&1; then
+if egrep "^AC_CONFIG_HEADER" configure.in >/dev/null 2>&1; then
   echo "*** Creating config.h template"
   $AUTOHEADER || exit 1
 fi
diff --git a/gettext-tools/gnulib-lib/binary-io.h b/gettext-tools/gnulib-lib/binary-io.h
index 317fe3d..1636ac0 100644
--- a/gettext-tools/gnulib-lib/binary-io.h
+++ b/gettext-tools/gnulib-lib/binary-io.h
@@ -57,7 +57,7 @@ set_binary_mode (int fd, int mode)
 
 /* SET_BINARY (fd);
    changes the file descriptor fd to perform binary I/O.  */
-#ifdef __DJGPP__
+#if defined __DJGPP__ || defined __EMX__
 # include <unistd.h> /* declares isatty() */
   /* Avoid putting stdin/stdout in binary mode if it is connected to
      the console, because that would make it impossible for the user
diff --git a/gettext-tools/gnulib-lib/localcharset.c b/gettext-tools/gnulib-lib/localcharset.c
index a225a2e..ac1a71b 100644
--- a/gettext-tools/gnulib-lib/localcharset.c
+++ b/gettext-tools/gnulib-lib/localcharset.c
@@ -478,6 +478,7 @@ locale_charset (void)
   ULONG cp[3];
   ULONG cplen;
 
+  codeset = NULL;
   /* Allow user to override the codeset, as set in the operating system,
      with standard language environment variables.  */
   locale = getenv ("LC_ALL");
@@ -507,12 +508,13 @@ locale_charset (void)
               buf [modifier - dot] = '\0';
               return buf;
             }
-        }
 
-      /* Resolve through the charset.alias file.  */
-      codeset = locale;
+          /* Resolve through the charset.alias file.  */
+          codeset = locale;
+        }
     }
-  else
+
+  if (codeset == NULL)
     {
       /* OS/2 has a function returning the locale's codepage as a number.  */
       if (DosQueryCp (sizeof (cp), cp, &cplen))
diff --git a/gettext-tools/gnulib-lib/pipe-filter-ii.c b/gettext-tools/gnulib-lib/pipe-filter-ii.c
index 8951f2e..6b38dca 100644
--- a/gettext-tools/gnulib-lib/pipe-filter-ii.c
+++ b/gettext-tools/gnulib-lib/pipe-filter-ii.c
@@ -27,6 +27,127 @@
 #include <unistd.h>
 #if (defined _WIN32 || defined __WIN32__) && ! defined __CYGWIN__
 # include <windows.h>
+#elif defined __KLIBC__
+# define INCL_DOS
+# include <os2.h>
+
+/* Simple implementation of Win32 APIs */
+
+#define WINAPI
+
+typedef struct _HANDLE
+{
+    TID tid;
+    HEV hevDone;
+    unsigned int WINAPI (*start) (void *);
+    void *arg;
+} *HANDLE;
+
+typedef ULONG DWORD;
+
+static void
+start_wrapper (void *arg)
+{
+  HANDLE h = (HANDLE) arg;
+
+  h->start (h->arg);
+
+  DosPostEventSem (h->hevDone);
+  _endthread ();
+}
+
+static HANDLE
+_beginthreadex (void *s, unsigned n, unsigned int WINAPI (*start) (void *),
+                void *arg, unsigned fl, unsigned *th)
+{
+  HANDLE h;
+
+  h = malloc (sizeof (*h));
+  if (!h)
+    return NULL;
+
+  if (DosCreateEventSem (NULL, &h->hevDone, 0, FALSE ))
+    goto exit_free;
+
+  h->start = start;
+  h->arg   = arg;
+
+  h->tid = _beginthread (start_wrapper, NULL, n, (void *) h);
+  if (h->tid == -1)
+    goto exit_close_event_sem;
+
+  return h;
+
+exit_close_event_sem:
+  DosCloseEventSem (h->hevDone);
+
+exit_free:
+  free (h);
+
+  return NULL;
+}
+
+static BOOL
+CloseHandle (HANDLE h)
+{
+  DosCloseEventSem (h->hevDone);
+  free (h);
+}
+
+# define _endthreadex(x) return (x)
+# define TerminateThread(h, e) DosKillThread (h->tid)
+
+# define GetLastError()  -1
+
+# ifndef ERROR_NO_DATA
+#  define ERROR_NO_DATA 232
+# endif
+
+# define INFINITE       SEM_INDEFINITE_WAIT
+# define WAIT_OBJECT_0  0
+
+static DWORD
+WaitForSingleObject (HANDLE h, DWORD ms)
+{
+  return DosWaitEventSem (h->hevDone, ms) == 0 ? WAIT_OBJECT_0 : (DWORD) -1;
+}
+
+static DWORD
+WaitForMultipleObjects (DWORD nCount, const HANDLE *pHandles, BOOL bWaitAll,
+                        DWORD ms)
+{
+    HMUX       hmux;
+    PSEMRECORD psr;
+    ULONG      ulUser;
+    ULONG      rc = (ULONG) -1;
+    DWORD      i;
+
+    psr = malloc (sizeof (*psr) * nCount);
+    if (!psr)
+      goto exit_return;
+
+    for (i = 0; i < nCount; ++i)
+      {
+        psr[i].hsemCur = (HSEM) pHandles[i]->hevDone;
+        psr[i].ulUser  = WAIT_OBJECT_0 + i;
+      }
+
+    if (DosCreateMuxWaitSem (NULL, &hmux, nCount, psr,
+                             bWaitAll ? DCMW_WAIT_ALL : DCMW_WAIT_ANY))
+      goto exit_free;
+
+    rc = DosWaitMuxWaitSem (hmux, ms, &ulUser);
+    DosCloseMuxWaitSem (hmux);
+
+exit_free:
+    free (psr);
+
+exit_return:
+    if (rc)
+        return (DWORD) -1;
+
+    return ulUser;
+}
 #else
 # include <signal.h>
 # include <sys/select.h>
@@ -41,7 +162,7 @@
 
 #include "pipe-filter-aux.h"
 
-#if (defined _WIN32 || defined __WIN32__) && ! defined __CYGWIN__
+#if (defined _WIN32 || defined __WIN32__) && ! defined __CYGWIN__ || defined __KLIBC__
 
 struct locals
 {
@@ -143,7 +264,7 @@ pipe_filter_ii_execute (const char *progname,
 {
   pid_t child;
   int fd[2];
-#if !((defined _WIN32 || defined __WIN32__) && ! defined __CYGWIN__)
+#if !((defined _WIN32 || defined __WIN32__) && ! defined __CYGWIN__ || defined __KLIBC__)
   struct sigaction orig_sigpipe_action;
 #endif
 
@@ -154,7 +275,7 @@ pipe_filter_ii_execute (const char *progname,
   if (child == -1)
     return -1;
 
-#if (defined _WIN32 || defined __WIN32__) && ! defined __CYGWIN__
+#if (defined _WIN32 || defined __WIN32__) && ! defined __CYGWIN__ || defined __KLIBC__
   /* Native Windows API.  */
   /* Pipes have a non-blocking mode, see function SetNamedPipeHandleState and
      the article "Named Pipe Type, Read, and Wait Modes", but Microsoft's
@@ -455,7 +576,7 @@ pipe_filter_ii_execute (const char *progname,
   {
     int saved_errno = errno;
     close (fd[1]);
-#if !((defined _WIN32 || defined __WIN32__) && ! defined __CYGWIN__)
+#if !((defined _WIN32 || defined __WIN32__) && ! defined __CYGWIN__ || defined __KLIBC__)
     if (sigaction (SIGPIPE, &orig_sigpipe_action, NULL) < 0)
       abort ();
 #endif
diff --git a/gettext-tools/gnulib-lib/progreloc.c b/gettext-tools/gnulib-lib/progreloc.c
index 45d6cf1..1250a92 100644
--- a/gettext-tools/gnulib-lib/progreloc.c
+++ b/gettext-tools/gnulib-lib/progreloc.c
@@ -44,6 +44,11 @@
 # include <windows.h>
 #endif
 
+#ifdef __EMX__
+# define INCL_DOS
+# include <os2.h>
+#endif
+
 #include "relocatable.h"
 
 #ifdef NO_XMALLOC
@@ -162,6 +167,18 @@ find_executable (const char *argv0)
     /* Shouldn't happen.  */
     return NULL;
   return xstrdup (location);
+#elif defined __EMX__
+  PPIB ppib;
+  char location[CCHMAXPATH];
+
+  DosGetInfoBlocks (NULL, &ppib);
+
+  if (DosQueryModuleName (ppib->pib_hmte, sizeof (location), location))
+    return NULL;
+
+  _fnslashify (location);
+
+  return xstrdup (location);
 #else /* Unix */
 # ifdef __linux__
   /* The executable is accessible as /proc/<pid>/exe.  In newer Linux
diff --git a/gettext-tools/gnulib-lib/relocatable.c b/gettext-tools/gnulib-lib/relocatable.c
index 410228a..74c3233 100644
--- a/gettext-tools/gnulib-lib/relocatable.c
+++ b/gettext-tools/gnulib-lib/relocatable.c
@@ -47,6 +47,14 @@
 # include <windows.h>
 #endif
 
+#ifdef __EMX__
+# define INCL_DOS
+# include <os2.h>
+
+#define strcmp  stricmp
+#define strncmp strnicmp
+#endif
+
 #if DEPENDS_ON_LIBCHARSET
 # include <libcharset.h>
 #endif
@@ -335,6 +343,43 @@ DllMain (HINSTANCE module_handle, DWORD event, LPVOID reserved)
   return TRUE;
 }
 
+#elif defined __EMX__
+
+extern int  _CRT_init (void);
+extern void _CRT_term (void);
+extern void __ctordtorInit (void);
+extern void __ctordtorTerm (void);
+
+unsigned long _System
+_DLL_InitTerm (unsigned long hModule, unsigned long ulFlag)
+{
+  static char location[CCHMAXPATH];
+
+  switch (ulFlag)
+  {
+    case 0:
+      if (_CRT_init () == -1)
+        return 0;
+
+      __ctordtorInit();
+
+      if (DosQueryModuleName (hModule, sizeof (location), location))
+        return 0;
+
+      _fnslashify (location);
+      shared_library_fullname = strdup (location);
+      break;
+
+    case 1:
+      __ctordtorTerm();
+
+      _CRT_term ();
+      break;
+  }
+
+  return 1;
+}
+
 #else /* Unix */
 
 static void
@@ -390,15 +435,15 @@ find_shared_library_fullname ()
 #endif
 }
 
-#endif /* Native Windows / Unix */
+#endif /* Native Windows / EMX / Unix */
 
 /* Return the full pathname of the current shared library.
    Return NULL if unknown.
-   Guaranteed to work only on Linux, Cygwin, and native Windows.  */
+   Guaranteed to work only on Linux, EMX, Cygwin, and native Windows.  */
 static char *
 get_shared_library_fullname ()
 {
-#if !((defined _WIN32 || defined __WIN32__) && !defined __CYGWIN__)
+#if !((defined _WIN32 || defined __WIN32__) && !defined __CYGWIN__ || defined __EMX__)
   static bool tried_find_shared_library_fullname;
   if (!tried_find_shared_library_fullname)
     {
@@ -489,6 +534,27 @@ relocate (const char *pathname)
             }
         }
     }
+
+#ifdef __EMX__
+  if (pathname && ISSLASH (pathname[0]))
+    {
+      const char *unixroot = getenv ("UNIXROOT");
+
+      if (unixroot && HAS_DEVICE (unixroot) && !unixroot[2])
+        {
+          char *result = (char *) xmalloc (2 + strlen (pathname) + 1);
+#ifdef NO_XMALLOC
+          if (result != NULL)
+#endif
+            {
+              strcpy (result, unixroot);
+              strcpy (result + 2, pathname);
+              return result;
+            }
+        }
+    }
+#endif
+
   /* Nothing to relocate.  */
   return pathname;
 }
diff --git a/gettext-tools/gnulib-lib/spawn-pipe.c b/gettext-tools/gnulib-lib/spawn-pipe.c
index 35567d4..93af01c 100644
--- a/gettext-tools/gnulib-lib/spawn-pipe.c
+++ b/gettext-tools/gnulib-lib/spawn-pipe.c
@@ -35,7 +35,7 @@
 
 #define _(str) gettext (str)
 
-#if (defined _WIN32 || defined __WIN32__) && ! defined __CYGWIN__
+#if (defined _WIN32 || defined __WIN32__) && ! defined __CYGWIN__ || defined __KLIBC__
 
 /* Native Windows API.  */
 # include <process.h>
@@ -114,7 +114,7 @@ create_pipe (const char *progname,
              bool slave_process, bool exit_on_error,
              int fd[2])
 {
-#if (defined _WIN32 || defined __WIN32__) && ! defined __CYGWIN__
+#if (defined _WIN32 || defined __WIN32__) && ! defined __CYGWIN__ || defined __KLIBC__
 
   /* Native Windows API.
      This uses _pipe(), dup2(), and spawnv().  It could also be implemented
diff --git a/gettext-tools/gnulib-lib/spawn.in.h b/gettext-tools/gnulib-lib/spawn.in.h
index bca2998..e22ec6b 100644
--- a/gettext-tools/gnulib-lib/spawn.in.h
+++ b/gettext-tools/gnulib-lib/spawn.in.h
@@ -32,7 +32,7 @@
 
 /* Get definitions of 'struct sched_param' and 'sigset_t'.
    But avoid namespace pollution on glibc systems.  */
-#if !(defined __GLIBC__ && !defined __UCLIBC__)
+#if !(defined __GLIBC__ && !defined __UCLIBC__) && !defined __KLIBC__
 # include <sched.h>
 # include <signal.h>
 #endif
diff --git a/gettext-tools/gnulib-lib/stdint.in.h b/gettext-tools/gnulib-lib/stdint.in.h
index 2db8b2e..e9af25b 100644
--- a/gettext-tools/gnulib-lib/stdint.in.h
+++ b/gettext-tools/gnulib-lib/stdint.in.h
@@ -291,8 +291,15 @@ typedef gl_uint_fast32_t gl_uint_fast16_t;
 
 #undef intptr_t
 #undef uintptr_t
+#ifndef __KLIBC__
 typedef long int gl_intptr_t;
 typedef unsigned long int gl_uintptr_t;
+#else
+/* intptr_t and uintptr_t are defined as int and unsigned int on OS/2 kLIBC,
+   respectively */
+typedef int gl_intptr_t;
+typedef unsigned int gl_uintptr_t;
+#endif
 #define intptr_t gl_intptr_t
 #define uintptr_t gl_uintptr_t
 
diff --git a/gettext-tools/gnulib-lib/w32spawn.h b/gettext-tools/gnulib-lib/w32spawn.h
index 3b5c08a..e75e2e6 100644
--- a/gettext-tools/gnulib-lib/w32spawn.h
+++ b/gettext-tools/gnulib-lib/w32spawn.h
@@ -16,8 +16,10 @@
    along with this program.  If not, see <http://www.gnu.org/licenses/>.  */
 
 /* Get declarations of the native Windows API functions.  */
-#define WIN32_LEAN_AND_MEAN
-#include <windows.h>
+#ifndef __KLIBC__
+# define WIN32_LEAN_AND_MEAN
+# include <windows.h>
+#endif
 
 /* Get _open_osfhandle().  */
 #include <io.h>
diff --git a/gettext-tools/gnulib-lib/wcwidth.c b/gettext-tools/gnulib-lib/wcwidth.c
index 253fcaa..c4f7ba7 100644
--- a/gettext-tools/gnulib-lib/wcwidth.c
+++ b/gettext-tools/gnulib-lib/wcwidth.c
@@ -26,6 +26,15 @@
 #include "streq.h"
 #include "uniwidth.h"
 
+#ifdef __KLIBC__
+/* To avoid 'conflicting types' error for `__wcwidth' on OS/2 kLIBC.
+   wchar_t(unsigned short) is defined differently from wint_t(int) on
+   OS/2 kLIBC. */
+#undef wcwidth
+/* Ignore wcwidth() of OS/2 kLIBC */
+#undef HAVE_WCWIDTH
+#endif
+
 int
 wcwidth (wchar_t wc)
 #undef wcwidth
diff --git a/gettext-tools/libgettextpo/localcharset.c b/gettext-tools/libgettextpo/localcharset.c
index a225a2e..ac1a71b 100644
--- a/gettext-tools/libgettextpo/localcharset.c
+++ b/gettext-tools/libgettextpo/localcharset.c
@@ -478,6 +478,7 @@ locale_charset (void)
   ULONG cp[3];
   ULONG cplen;
 
+  codeset = NULL;
   /* Allow user to override the codeset, as set in the operating system,
      with standard language environment variables.  */
   locale = getenv ("LC_ALL");
@@ -507,12 +508,13 @@ locale_charset (void)
               buf [modifier - dot] = '\0';
               return buf;
             }
-        }
 
-      /* Resolve through the charset.alias file.  */
-      codeset = locale;
+          /* Resolve through the charset.alias file.  */
+          codeset = locale;
+        }
     }
-  else
+
+  if (codeset == NULL)
     {
       /* OS/2 has a function returning the locale's codepage as a number.  */
       if (DosQueryCp (sizeof (cp), cp, &cplen))
diff --git a/gettext-tools/libgettextpo/relocatable.c b/gettext-tools/libgettextpo/relocatable.c
index 410228a..74c3233 100644
--- a/gettext-tools/libgettextpo/relocatable.c
+++ b/gettext-tools/libgettextpo/relocatable.c
@@ -47,6 +47,14 @@
 # include <windows.h>
 #endif
 
+#ifdef __EMX__
+# define INCL_DOS
+# include <os2.h>
+
+#define strcmp  stricmp
+#define strncmp strnicmp
+#endif
+
 #if DEPENDS_ON_LIBCHARSET
 # include <libcharset.h>
 #endif
@@ -335,6 +343,43 @@ DllMain (HINSTANCE module_handle, DWORD event, LPVOID reserved)
   return TRUE;
 }
 
+#elif defined __EMX__
+
+extern int  _CRT_init (void);
+extern void _CRT_term (void);
+extern void __ctordtorInit (void);
+extern void __ctordtorTerm (void);
+
+unsigned long _System
+_DLL_InitTerm (unsigned long hModule, unsigned long ulFlag)
+{
+  static char location[CCHMAXPATH];
+
+  switch (ulFlag)
+  {
+    case 0:
+      if (_CRT_init () == -1)
+        return 0;
+
+      __ctordtorInit();
+
+      if (DosQueryModuleName (hModule, sizeof (location), location))
+        return 0;
+
+      _fnslashify (location);
+      shared_library_fullname = strdup (location);
+      break;
+
+    case 1:
+      __ctordtorTerm();
+
+      _CRT_term ();
+      break;
+  }
+
+  return 1;
+}
+
 #else /* Unix */
 
 static void
@@ -390,15 +435,15 @@ find_shared_library_fullname ()
 #endif
 }
 
-#endif /* Native Windows / Unix */
+#endif /* Native Windows / EMX / Unix */
 
 /* Return the full pathname of the current shared library.
    Return NULL if unknown.
-   Guaranteed to work only on Linux, Cygwin, and native Windows.  */
+   Guaranteed to work only on Linux, EMX, Cygwin, and native Windows.  */
 static char *
 get_shared_library_fullname ()
 {
-#if !((defined _WIN32 || defined __WIN32__) && !defined __CYGWIN__)
+#if !((defined _WIN32 || defined __WIN32__) && !defined __CYGWIN__ || defined __EMX__)
   static bool tried_find_shared_library_fullname;
   if (!tried_find_shared_library_fullname)
     {
@@ -489,6 +534,27 @@ relocate (const char *pathname)
             }
         }
     }
+
+#ifdef __EMX__
+  if (pathname && ISSLASH (pathname[0]))
+    {
+      const char *unixroot = getenv ("UNIXROOT");
+
+      if (unixroot && HAS_DEVICE (unixroot) && !unixroot[2])
+        {
+          char *result = (char *) xmalloc (2 + strlen (pathname) + 1);
+#ifdef NO_XMALLOC
+          if (result != NULL)
+#endif
+            {
+              strcpy (result, unixroot);
+              strcpy (result + 2, pathname);
+              return result;
+            }
+        }
+    }
+#endif
+
   /* Nothing to relocate.  */
   return pathname;
 }
diff --git a/gettext-tools/libgettextpo/stdint.in.h b/gettext-tools/libgettextpo/stdint.in.h
index 2db8b2e..e9af25b 100644
--- a/gettext-tools/libgettextpo/stdint.in.h
+++ b/gettext-tools/libgettextpo/stdint.in.h
@@ -291,8 +291,15 @@ typedef gl_uint_fast32_t gl_uint_fast16_t;
 
 #undef intptr_t
 #undef uintptr_t
+#ifndef __KLIBC__
 typedef long int gl_intptr_t;
 typedef unsigned long int gl_uintptr_t;
+#else
+/* intptr_t and uintptr_t are defined as int and unsigned int on OS/2 kLIBC,
+   respectively */
+typedef int gl_intptr_t;
+typedef unsigned int gl_uintptr_t;
+#endif
 #define intptr_t gl_intptr_t
 #define uintptr_t gl_uintptr_t
 
diff --git a/gettext-tools/libgettextpo/wcwidth.c b/gettext-tools/libgettextpo/wcwidth.c
index 253fcaa..c4f7ba7 100644
--- a/gettext-tools/libgettextpo/wcwidth.c
+++ b/gettext-tools/libgettextpo/wcwidth.c
@@ -26,6 +26,15 @@
 #include "streq.h"
 #include "uniwidth.h"
 
+#ifdef __KLIBC__
+/* To avoid 'conflicting types' error for `__wcwidth' on OS/2 kLIBC.
+   wchar_t(unsigned short) is defined differently from wint_t(int) on
+   OS/2 kLIBC. */
+#undef wcwidth
+/* Ignore wcwidth() of OS/2 kLIBC */
+#undef HAVE_WCWIDTH
+#endif
+
 int
 wcwidth (wchar_t wc)
 #undef wcwidth
